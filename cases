#!/usr/bin/env python
# -*- coding: utf-8 -*-
import time

from resource.page_object_files.pages_manager import PagesManager
from util.random_util import RandomUtil


class InitBusiness(PagesManager):

    def init_sales_order(self):
        """ 点击销售管理，销售订单"""
        self.driver.click(self.home_page.sales_manage())
        self.driver.click(self.home_page.sales_manage(), 0.5)
        if not self.driver.is_element_exist(self.home_page.sales_order()):
            self.driver.click(self.home_page.sales_manage(), 0.5)
        self.driver.click(self.home_page.sales_order(), 0.5)

    def pre_condition(self):
        """ 前置条件 工厂未启用审核，工厂业务规则控制设置：销售订单号自动生成，计价方式为未税单价，金额进度为4，数量精度为2"""
        self.driver.click(self.home_page.basic_data())
        self.driver.sleep(0.6)
        self.driver.click(self.home_page.factory_system_setting())
        class_ = self.driver.get_element_attribute(self.factory_system_settings_page.sales_order_audit_checkbox(), 'class')
        if class_ == 'ant-checkbox ant-checkbox-checked':
            self.driver.click(self.factory_system_settings_page.sales_order_audit_checkbox())
            self.driver.click(self.factory_system_settings_page.factory_system_setting_save_btn())
        self.driver.click(self.public_page.first_tab_close_btn())
        self.driver.click(self.home_page.basic_data())
        self.driver.sleep(0.6)
        self.driver.click(self.home_page.factory_business_rules())
        rules_control = self.driver.get_element_value_text(self.factory_business_roles_page.please_choose_sales_order_generate_rules_value())
        if rules_control != '自动':
            self.driver.click(self.factory_business_roles_modify_page.sales_order_generate_rules_choose_bar())
            self.driver.select_option_by_index(self.public_page.public_anyone_in_list(), '自动')
            self.driver.click(self.factory_business_roles_modify_page.factory_role_save_btn())
        money_precison = self.driver.get_element_value_text(self.factory_business_roles_page.money_precision_text_value())
        quantity_precison = self.driver.get_element_value_text(self.factory_business_roles_page.quantity_precision_text_value())
        if money_precison != '4' and quantity_precison != '2':
            self.driver.click(self.factory_business_roles_page.factory_roles_modify_btn())
            self.driver.send_keys_clear(self.factory_business_roles_page.money_precision_text_value(), '4')
            self.driver.send_keys_clear(self.factory_business_roles_page.quantuty_precision_text_value(), '2')
            self.driver.click(self.factory_business_roles_modify_page.factory_role_save_btn())

    def init_and_close_first_tab(self):
        """ 打开销售订单并关掉第一个tab"""
        self.init_sales_order()
        self.driver.click(self.public_page.public_add_button())
        self.driver.click(self.public_page.first_tab_close_btn())

    def start_use_double_unit(self):
        """ 工厂业务规则启用双单位"""
        self.driver.click(self.home_page.basic_data())
        self.driver.click(self.home_page.basic_data())
        self.driver.sleep(0.6)
        self.driver.click(self.home_page.factory_business_rules())
        text = self.driver.get_element_value_text(self.factory_business_roles_page.please_choose_start_use_doule_unit_value())
        if text != '是':
            self.driver.click(self.factory_business_roles_page.factory_roles_modify_btn())
            self.driver.click(self.factory_business_roles_modify_page.start_use_double_unit_choose_bar())
            self.driver.select_option_by_text(self.public_page.public_anyone_in_list(), '是', 0.5)
            self.driver.click(self.factory_business_roles_modify_page.factory_role_save_btn())
        self.driver.click(self.public_page.first_tab_close_btn())


class SalesOrder(InitBusiness):

    def check_add_button_function(self):
        """ 137 1 点击新增按钮 在列表最上方添加新的单元格"""
        self.init_sales_order()
        self.driver.click(self.public_page.public_add_button())
        self.driver.click(self.public_page.first_tab_close_btn())
        flag = self.driver.is_element_exist(self.public_page.public_table_header())
        return flag

    def check_sales_order_table_header(self):
        """ 2573 1.1二级菜单进入销售订单；检查销售订单列表页的按钮是否为 【刷新】【新增】  【删除】"""
        self.init_sales_order()
        flag = self.driver.is_element_exist(self.public_page.public_add_button())
        flag2 = self.driver.is_element_exist(self.public_page.public_refresh_button())
        flag3 = self.driver.is_element_exist(self.public_page.public_delete_button())
        return flag, flag2, flag3

    def check_sales_order_must_input_column(self):
        """ 2573 1.2 1.2新增销售订单，检查必填字段；进入销售订单详情页面，检查必填字段* ，表头：订单编号、下单日期、
            客户编号，税率；表身：产品编码、数量、含税单价、含税金额；"""
        self.init_sales_order()
        self.driver.click(self.public_page.public_add_button())
        self.driver.click(self.public_page.first_tab_close_btn())
        class_1 = self.driver.get_element_attribute(self.sales_order_page.sales_order_number_ele(), 'class')
        class_2 = self.driver.get_element_attribute(self.sales_order_page.sales_order_date_ele(), 'class')
        class_3 = self.driver.get_element_attribute(self.sales_order_page.sales_customerId_ele(), 'class')
        class_4 = self.driver.get_element_attribute(self.sales_order_page.sales_saler_title_ele(), 'class')
        return class_1, class_2, class_3, class_4

    def check_sales_number_generate_rule(self):
        """ 2573 1.3检查订单编号生成规格；SO+YYYYMMNN+001；不限制单数；"""
        self.init_sales_order()
        self.driver.click(self.public_page.public_add_button())
        self.driver.click(self.public_page.first_tab_close_btn())
        date = time.strftime('%Y%m%d')
        number = 'SO' + date
        actual_number = self.driver.get_element_value_text(self.sales_order_page.sales_order_input_bar())
        return number, actual_number

    def check_order_date_default(self):
        """ 2573 1.4下单日期默认带出系统当日的日期；格式为年月日，2020-01-04；可修改，修改范围为当日及当日以后的日期，前端 限制；"""
        self.init_sales_order()
        self.driver.click(self.public_page.public_add_button())
        self.driver.click(self.public_page.first_tab_close_btn())
        now_date = time.strftime('%Y-%m-%d')
        default_date = self.driver.get_element_value_text(self.sales_order_page.sales_order_date_input_bar())
        return now_date, default_date

    def check_customer_code(self):
        """ 2573 1.5客户编号 选择客户主数据，启用的，未删除的主数据；"""
        self.init_sales_order()
        self.driver.click(self.public_page.public_add_button())
        self.driver.click(self.public_page.first_tab_close_btn())
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), '001')
        text = self.driver.find_element(self.sales_order_page.sales_customer_code_choose_bar()).text
        if len(text) > 0:
            return True

    def check_deliver_date(self):
        """ 2573 1.6交货日期 非必填，选择输入，范围为当日及当日以后的日期，前端限制；"""
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_deliver_date_choose_bar())
        self.driver.send_keys_enter(self.public_page.public_date_input(), '2000-10-10')

    def check_receive_date(self):
        """ 2573 1.7收货日期 非必填，选择输入，范围为当日及当日以后的日期，前端限制；"""
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_plan_deliver_choose_bar())
        self.driver.send_keys_enter(self.public_page.public_date_input(), '2000-10-10')

    def check_receive_man(self):
        """ 2573 1.8收货人 非必填；默认客户带出，可修改，"""
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), '001')
        text = self.driver.find_element(self.sales_order_page.sales_customer_code_choose_bar()).text
        flag = len(text)
        return flag

    def check_receive_address(self):
        """ 2573 1.9 收货地址 非必填；默认客户带出，可修改"""
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), '001')
        flag = self.driver.is_element_exist(self.sales_order_page.sales_order_pay_method_input())
        text = self.driver.get_element_value_text(self.sales_order_page.sales_order_pay_method_input())
        num = len(text)
        return flag, num

    def check_account_charge_mode(self):
        """ 2573 1.10结款方式 非必填；默认客户带出，可修改"""
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), '001')
        flag = self.driver.is_element_exist(self.sales_order_page.sales_order_pay_method_input())
        text = self.driver.get_element_value_text(self.sales_order_page.sales_order_pay_method_input())
        num = len(text)
        return flag, num

    def check_tax_rate(self):
        """ 2573 1.11税率 必填，默认带出工厂业务规则设置的税率；可修改，输入范围为0货1-100的整数；"""
        self.driver.click(self.home_page.basic_data())
        self.driver.sleep(0.6)
        self.driver.click(self.home_page.factory_business_rules())
        text = self.driver.get_element_value_text(self.factory_business_roles_page.factory_business_default_taxrate_text())
        self.driver.click(self.public_page.first_tab_close_btn())
        self.init_and_close_first_tab()
        text2 = self.driver.get_element_value_text(self.sales_order_page.sales_order_tax_rate())
        return text, text2

    def check_notax_rate(self):
        """ 2573 1.12未税金额合计 不可编辑，表头未税金额合计=∑表身未税金额累加；"""
        self.init_and_close_first_tab()
        flag = self.driver.is_element_exist(self.sales_order_page.sales_order_no_tax_amount())
        return flag

    def check_have_tax_rate(self):
        """ 2573 1.13含税金额合计 不可编辑，表头含税金额合计=∑表身含税金额的累加；；"""
        self.init_and_close_first_tab()
        flag = self.driver.is_element_exist(self.sales_order_page.sales_order_have_tax_amount())
        return flag

    def check_tax_amount(self):
        """ 25731.14税额合计 不可编辑，表头税额合计=表头含税金额合计-表头未税金额合计；；"""
        self.init_and_close_first_tab()
        flag = self.driver.is_element_exist(self.sales_order_page.sales_order_tax_amount())
        return flag

    def check_salesman(self):
        """ 2573 1.15销售员 非必填，选择人员主数据，启用的未删除的人员；"""
        self.init_and_close_first_tab()
        flag = self.driver.is_element_exist(self.sales_order_page.salesman_choose_bar())
        text = self.driver.find_element(self.sales_order_page.salesman_choose_bar()).text
        num = len(text)
        return flag, num

    def check_remark(self):
        """ 2573 1.16备注 非必填，长度限制255；"""
        self.init_and_close_first_tab()
        flag = self.driver.is_element_exist(self.sales_order_page.sales_order_remark_input_bar())
        self.driver.send_keys(self.sales_order_page.sales_order_remark_input_bar(), RandomUtil.random_int(255))
        num = self.driver.get_element_value_text(self.sales_order_page.sales_order_remark_input_bar())
        num = len(num)
        return flag, num

    def check_line_number(self):
        """ 2573 表身字段 2.1行号 唯一性，必填，自增序列，默认第一行行号为1，每增加1行行号默认+1，保存前行号可改，表身按行号排序，"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        one = self.driver.find_element(self.public_page.public_first_line_data()).text
        self.driver.click(self.public_page.public_table_add_btn())
        two = self.driver.find_element(self.public_page.public_second_line_data()).text
        return one, two

    def check_have_header_no_table(self):
        """ 2574 4 新增保存保存校验 4.1表头已经填写，表身没有行；报错“明细必填不能为空”"""
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_index(self.public_page.public_anyone_in_list(), 0)
        self.driver.click(self.public_page.public_order_page_save_btn())

    def check_not_have_material_code(self):
        """ 2574 表头客户编号未填写"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_order_page_save_btn())

    def check_not_choose_material(self):
        """ 2574 4.2表头已经填写，表身没有行已经填写了物料没有填写数量 	报错“行{1}产品编码不能为空” """
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_index(self.public_page.public_anyone_in_list(), 0)
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.public_page.public_order_page_save_btn())
        text = self.driver.find_element(self.public_page.public_first_line_data()).text
        return text

    def check_not_input_number(self):
        """ 4.3表头已经填写，表身没有行已经填写了物料没有填写数量 报错“数量参数必须大于0” """
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), '南方泵业')
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_code_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_second_choose_any_option(), 'BCP-A001-MTO')
        self.driver.click(self.public_page.public_order_page_save_btn())

    def check_not_input_MTO(self):
        """ 2574 4.4表头已经填写，表身没有行已经填写了物料填写数量等相关字段，并且物料启用mto,且mto字段是空的， 报错“MTO必填不能为空” """
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), '南方泵业')
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_code_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_second_choose_any_option(), 'BCP-A001-MTO')
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        self.driver.sleep(0.5)
        self.driver.double_click(self.sales_order_page.sales_product_MTO_bar())
        self.driver.click_backspace_button()
        self.driver.click(self.public_page.public_order_page_save_btn())

    def check_table_line_number(self):
        """ 2574 2.1行号 唯一性，必填，自增序列，默认第一行行号为1，每增加1行行号默认+1，保存前行号可改，表身按行号排序；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        num = self.driver.find_element(self.sales_order_page.sales_line_number_input_bar()).text
        self.driver.click(self.public_page.public_table_add_btn())
        num2 = self.driver.find_element(self.sales_order_page.sales_second_line_number_input_bar()).text
        return num, num2

    def check_table_material_code(self):
        """ 2574 2.2产品编码 必填，模糊搜索输入或者来源窗搜索输入，带出名称和规格，单位；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_code_input_bar())
        flag = self.driver.is_element_exist(self.public_page.public_anyone_in_list())
        text = self.driver.find_element(self.sales_order_page.sales_product_code_input_bar()).text
        num = len(text)
        return flag

    def check_table_material_name(self):
        """ 2574 2.3产品名称 必填，模糊搜索输入或者来源窗搜索输入，带出编码和规格，单位；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_name_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), 'BCP-A001-MTO')
        text = self.driver.find_element(self.sales_order_page.sales_product_name_input_bar()).text
        num = len(text)
        return num

    def check_table_material_size(self):
        """ 2574 2.4产品规格 非必填；根据产品编码和产品名产带出，可修改；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_name_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), 'BCP-A001-MTO')
        text = self.driver.find_element(self.sales_order_page.sales_product_size_input_bar()).text
        num = len(text)
        return num

    def check_table_MTO(self):
        """ 2574 2.5MTO号 物料启用MTO的话必填，默认带出销售订单号，可修改；如果选择的物料不启用MTO号的话，不可编辑；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_name_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), 'BCP-A001-MTO')
        self.driver.sleep(1)
        text = self.driver.find_element(self.sales_order_page.sales_product_MTO_bar()).text
        num = len(text)
        return num

    def check_table_amount(self):
        """ 2574 2.6数量 必填且必须大于0；"""
        self.init_and_close_first_tab()
        self.driver.click(self.sales_order_page.sales_customer_code_choose_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), '南方泵业')
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_code_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_second_choose_any_option(), 'BCP-A001-MTO')
        self.driver.click(self.public_page.public_order_page_save_btn())

    def check_table_unit(self):
        """ 2574 2.7单位 选物料的时候带出，有单位别名的时候显示单位别名，无单位别名的时候显示基本单位；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_code_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), 'BCP-A001-MTO')
        text = self.driver.find_element(self.public_page.public_table_eighth_column()).text
        num = len(text)
        return num

    def check_table_deliver_date(self):
        """ 2574 2.8交货日期 非必填，如果表头已经填写，默认带出表头的日期，可修改，"""
        self.init_and_close_first_tab()
        date = self.driver.get_element_value_text(self.sales_order_page.sales_order_date_input_bar())
        now = time.strftime('%Y-%m-%d')
        self.driver.send_keys_enter(self.sales_order_page.sales_order_date_input_bar(), now)
        return date, now

    def check_table_ship_date(self):
        """ 2574 2.9计划发货日期 非必填，如果表头已经填写，默认带出表头的日期，可修改，"""
        self.init_and_close_first_tab()
        now = time.strftime('%Y-%m-%d')
        self.driver.click(self.sales_order_page.sales_plan_deliver_choose_bar())
        self.driver.send_keys_enter(self.public_page.public_date_input(), now)
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.double_click(self.sales_order_page.sales_product_code_input_bar())
        self.driver.select_option_by_part_text(self.public_page.public_anyone_in_list(), 'BCP-A001-MTO')
        date = self.driver.find_element(self.public_page.public_table_tenth_column()).text
        return now, date

    def check_have_tax_unit_price(self):
        """ 2574 2.10 含税单价 必填，手工输入，防呆控制，含税单价>=0，单价为0表示赠品；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.public_page.public_table_eleven_column())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_notax_unitprice_input_bar(), -10)

    def caculate_have_tax_unit_price(self):
        """ 2574 2.11含税金额 含税金额=含税单价*数量，"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        self.driver.click(self.public_page.public_table_eleven_column())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_notax_unitprice_input_bar(), '10')
        mount = self.driver.find_element(self.public_page.public_table_twelve_column()).text
        return mount

    def check_tax_rate_value(self):
        """ 2574 2.12税率 税率：必填，默认从表头上带出，如果表头为空则从物料上带。防呆控制，税率>=0，0表示免税；（表头不会为空）"""
        self.init_and_close_first_tab()
        rate = self.driver.get_element_value_text(self.sales_order_page.sales_order_tax_rate())
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.sleep(0.5)
        table_rate = self.driver.find_element(self.public_page.public_table_thirteen_column()).text
        table_rate = table_rate.split('%')[0]
        return rate, table_rate

    def check_no_tax_rate_editable(self):
        """ 2574 2.13未税单价 不可编辑，未税单价=含税单价/（1+税率）；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        self.driver.click(self.public_page.public_table_eleven_column())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_notax_unitprice_input_bar(), 10)
        table_rate = self.driver.find_element(self.public_page.public_table_thirteen_column()).text
        table_rate = int(table_rate.split('%')[0]) / 100
        no_tax = str(round((10 / (1 + float(table_rate))), 2))
        notax_price = self.driver.find_element(self.public_page.public_table_fourteen_column()).text
        attr = self.driver.get_element_attribute(self.public_page.public_table_fourteen_column(), 'class')
        return no_tax, notax_price, attr

    def check_no_tax_mount(self):
        """ 2574 2.14未税金额 不可编辑，未税金额=未税单价*数量；"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        self.driver.click(self.public_page.public_table_eleven_column())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_notax_unitprice_input_bar(), 10)
        notax_price = self.driver.find_element(self.public_page.public_table_fourteen_column()).text
        attr = self.driver.get_element_attribute(self.public_page.public_table_fourteen_column(), 'class')
        no_tax_on_page = self.driver.find_element(self.public_page.public_table_fifteen_column()).text  # 未税金额
        no_tax_mount = str(50 * float(notax_price))
        return no_tax_on_page, no_tax_mount, attr

    def check_tax_mount(self):
        """ 2574 2.15税额 不可编辑，税额=含税金额-未税金额；"""
        have_tax_mount = self.caculate_have_tax_unit_price() # 含税金额
        no_tax_on_page = self.driver.find_element(self.public_page.public_table_fifteen_column()).text  # 未税金额
        tax_mount = str(float(have_tax_mount) - float(no_tax_on_page))
        tax_mount_on_page = self.driver.find_element(self.public_page.public_table_sixteen_column()).text
        attr = self.driver.get_element_attribute(self.public_page.public_table_sixteen_column(), 'class')
        return tax_mount, tax_mount_on_page, attr

    def check_wait_deliver_mount(self):
        """ 2574 2.16待发数量 待发数量为虚字段，每次打开销售订单时虚字段需要自动计算。待发数量=数量-发货单数量-取消数量。"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        self.driver.sleep(0.3)
        wait_deliver_mount_on_page = self.driver.find_element(self.public_page.public_table_seventeen_column()).text
        deliver_order_mount_on_page = self.driver.find_element(self.public_page.public_table_eighteen_column()).text # 发货单数量
        cancel_mount_on_page = self.driver.find_element(self.public_page.public_table_twenty_column()).text # 取消数量
        wait_deliver_mount = str(50 - int(deliver_order_mount_on_page) - int(cancel_mount_on_page))
        attr = self.driver.get_element_attribute(self.public_page.public_table_seventeen_column(), 'class')
        return wait_deliver_mount, attr

    def check_deliver_order_mount(self):
        """ 2574 2.17发货单数量 对应的发货单数量的累计"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        deliver_order_mount_on_page = self.driver.find_element(self.public_page.public_table_eighteen_column()).text # 发货单数量
        attr = self.driver.get_element_attribute(self.public_page.public_table_eighteen_column(), 'class')
        return deliver_order_mount_on_page, attr

    def check_outhouse_mount(self):
        """ 2574 2.18出库数量 对应的出库数量的累计"""
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        outhouse_mount_on_page = self.driver.find_element(self.public_page.public_table_nineteen_column()).text
        attr = self.driver.get_element_attribute(self.public_page.public_table_nineteen_column(), 'class')
        return outhouse_mount_on_page, attr

    def check_sales_return_number(self):
        """ 2.20 退货数量 """
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        sales_return_on_page = self.driver.find_element(self.public_page.public_table_twenty_column()).text
        attr = self.driver.get_element_attribute(self.public_page.public_table_twenty_column(), 'class')
        return sales_return_on_page, attr

    def check_cancel_number(self):
        """ 2574 2.21取消数量 可取消条件下取消的数量 """
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        cancel_on_page = self.driver.find_element(self.public_page.public_table_twenty_one_column()).text
        attr = self.driver.get_element_attribute(self.public_page.public_table_twenty_one_column(), 'class')
        return cancel_on_page, attr

    def check_allow_over_deliver_number(self):
        """ 2574 2.22允许最大超发数量 1、工厂业务规则为按照订单数量超发的时候可以编辑输入； """
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        flag = self.driver.is_element_exist(self.public_page.public_table_twenty_two_column())
        attr = self.driver.get_element_attribute(self.public_page.public_table_twenty_two_column(), 'class')
        return flag, attr

    def check_over_deliver_number(self):
        """ 2574 2.23超发数量 """
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        over_deliver_number_on_page = self.driver.find_element(self.public_page.public_table_twenty_three_column()).text
        attr = self.driver.get_element_attribute(self.public_page.public_table_twenty_three_column(), 'class')
        return over_deliver_number_on_page, attr

    def check_packbox_number(self):
        """ 2574 2.24装箱数量 装箱数量，手工输入，正整数限制；"""
        self.start_use_double_unit()
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.scroll_to_right()
        self.driver.click(self.public_page.public_table_twenty_seven_column())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_packbox_number_input_bar(), '20.3')

    def check_box_number(self):
        """ 2574 2.25箱数 自动计算，箱数=数量/装箱数量，存在余数则进1位取整，正整数限制；；"""
        self.start_use_double_unit()
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.click(self.sales_order_page.sales_product_qty_bar())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_qty_input_bar(), 50)
        self.driver.scroll_to_right()
        self.driver.click(self.public_page.public_table_twenty_seven_column())
        self.driver.send_keys_enter(self.sales_order_page.sales_table_packbox_number_input_bar(), 20)
        box_number_on_page = self.driver.find_element(self.public_page.public_table_twenty_eight_column()).text
        return box_number_on_page

    def check_convert_rate(self):
        """ 2574 2.26 换算率 非必填，工厂业务规则启用双单位为是的时候才显示；根据交易单位带出，在计量单位里面设置好；换算率”"""
        self.start_use_double_unit()
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        flag = self.driver.is_element_exist(self.public_page.public_table_twenty_four_column())
        return flag

    def check_charge_unit(self):
        """ 2574 2.27交易单位 非必填，工厂业务规则启用双单位为是的时候才显示；交易单位：手工输入，支持模糊查找。"""
        self.start_use_double_unit()
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        flag = self.driver.is_element_exist(self.public_page.public_table_twenty_six_column())
        return flag

    def check_charge_number(self):
        """ 2574 2.28交易数量 非必填，工厂业务规则启用双单位为是的时候才显示；"""
        self.start_use_double_unit()
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        flag = self.driver.is_element_exist(self.public_page.public_table_twenty_five_column())
        return flag

    def check_remark_value(self):
        """ 2574 2.29备注 """
        self.start_use_double_unit()
        self.init_and_close_first_tab()
        self.driver.click(self.public_page.public_table_add_btn())
        self.driver.scroll_to_right()
        self.driver.click(self.public_page.public_table_thirty_column(), 0.5)
        ran_remark = RandomUtil.random_chinese(6)
        self.driver.send_keys_enter(self.public_page.public_table_remark_input_bar(), ran_remark)
        return ran_remark

